float init_array(float pointer, float dim_pointer, float dim_pointer_size)
{
    if(dim_pointer_size == 1)
        say :dim_pointer;
        
    var current_dim = :dim_pointer;
    var child_size = 0;
    for(var i = 0; i < current_dim; i++)
    {
        var child_pointer = pointer + current_dim + (i * child_size);
        child_size = init_array(child_pointer, dim_pointer + 1, dim_pointer_size - 1);
        :pointer + i = child_pointer;
    }
    say current_dim * (child_size + 1);
}

float linked_list_next(float list)
    say :list + 1;

float _linked_list_next_set(float list, float value)
    :list + 1 = value;

float linked_list_value(float list)
    say :list;

float _linked_list_value_set(float list, float value)
    :list = value;

float linked_list_size(float list)
{
    if(linked_list_next(list) == 0)
        say 1;
    say 1 + linked_list_size(linked_list_next(list));
}

float _linked_list_last(float list)
{
    while(linked_list_next(list) != 0)
    {
        list = linked_list_next(list);
    }
    say list;
}

float linked_list_new(float value) 
{
    var list = bmem(2);
    _linked_list_value_set(list, value);
    say list;
}

float linked_list_add(float list, float value)
{
    var last = _linked_list_last(list);
    var new = linked_list_new(value);
    _linked_list_next_set(last, new);
}

float linked_list_remove(float list, float index)
{
    var length = linked_list_size(list);
    if(index >= length)
        crash "index out of range";

    if(index == 0)
    {
        var next = linked_list_next(list);
        rmem(list);
        say next;
    }
    else
    {   
        var before = list;
        for(var i = 0; i < index - 1; i++)
        {
            before = linked_list_next(before);
        }
        var removable = linked_list_next(before);
        if(index == length - 1)
        {
            _linked_list_next_set(before, 0);
        }
        else 
        {
            var next = linked_list_next(removable);
            _linked_list_next_set(before, next);
        }
        rmem(removable);
        say list;
    }
}

float linked_list_display_values(float list)
{
    var length = linked_list_size(list);
    for(var i = 0; i < length; i++)
    {
        print linked_list_value(list);
        list = linked_list_next(list);
    }
}
